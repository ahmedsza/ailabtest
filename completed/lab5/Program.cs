using Azure.AI.Projects;
using Azure.Identity;
using Microsoft.Extensions.Configuration;

// Load environment variables
IConfigurationRoot configuration = new ConfigurationBuilder()
    .AddJsonFile("appsettings.json", optional: false)
    .Build();

// Set up the project client
AgentsClient client = new AgentsClient(
    configuration["AzureAI:ProjectConnectionString"],
    new AzureCliCredential());

// Create a Code Interpreter tool
var codeInterpreter = new CodeInterpreterToolDefinition();

// Create an agent with the Code Interpreter tool
Agent agent = await client.CreateAgentAsync(
    model: configuration["AzureAI:ModelName"],
    name: "ai-lab-agent5",
    instructions: "You are a helpful agent",
    tools: [codeInterpreter]
);

// Create a thread for our interaction with the agent
AgentThread thread = await client.CreateThreadAsync();

// Create a message to send to the agent on the created thread
ThreadMessage message = await client.CreateMessageAsync(
    thread.Id,
    MessageRole.User,
    @"
        You are my Python programming assistant. Generate code and execute it according to the following requirements:

        1. Create a short blog post on the marvels of AI and save the content to blog-{YYMMDDHHMMSS}.md
        2. Give me the download link for this file
    "
);

// Process the message with the agent, asynchronously
ThreadRun run = await client.CreateRunAsync(thread.Id, agent.Id);
do
{
    await Task.Delay(TimeSpan.FromMilliseconds(500));
    run = await client.GetRunAsync(thread.Id, run.Id);
} while (run.Status == RunStatus.Queued || run.Status == RunStatus.InProgress);
Console.WriteLine($"Run finished with status: {run.Status}");

// Check the status of the run
if (run.Status == RunStatus.Failed)
{
    Console.WriteLine($"Run failed with error: {run.LastError}");
}
else
{
    // Get the response messages
    Azure.Response<PageableList<ThreadMessage>> afterRunMessagesResponse = await client.GetMessagesAsync(thread.Id);
    IReadOnlyList<ThreadMessage> messages = afterRunMessagesResponse.Value.Data;

    // Print the last message from the assistant
    var lastMessage = messages.Last(m => m.Role == MessageRole.Agent)?.ContentItems[0] as MessageTextContent;
    if (lastMessage is not null)
    {
        Console.WriteLine($"Last message: {lastMessage.Text}");

        // Save the file generated by the assistant
        foreach (var annotation in lastMessage.Annotations.OfType<MessageTextFilePathAnnotation>())
        {
            AgentFile agentFile = await client.GetFileAsync(annotation.FileId);
            BinaryData fileBytes = await client.GetFileContentAsync(annotation.FileId);

            var filePath = Path.Combine("./blog", Path.GetFileName(agentFile.Filename));
            Directory.CreateDirectory(Path.GetDirectoryName(filePath)!);
            await File.WriteAllBytesAsync(filePath, fileBytes.ToArray());
        }
    }
}

// Clean up resources
await client.DeleteThreadAsync(thread.Id);
await client.DeleteAgentAsync(agent.Id);